package com.android.library.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.library.bean.DBReadedBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBREADED_BEAN".
*/
public class DBReadedBeanDao extends AbstractDao<DBReadedBean, Long> {

    public static final String TABLENAME = "DBREADED_BEAN";

    /**
     * Properties of entity DBReadedBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Module_id = new Property(1, String.class, "module_id", false, "module_id");
        public final static Property DataId = new Property(2, String.class, "dataId", false, "dataId");
        public final static Property Mark1 = new Property(3, String.class, "mark1", false, "MARK1");
        public final static Property Mark2 = new Property(4, String.class, "mark2", false, "MARK2");
    }


    public DBReadedBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBReadedBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBREADED_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"module_id\" TEXT," + // 1: module_id
                "\"dataId\" TEXT," + // 2: dataId
                "\"MARK1\" TEXT," + // 3: mark1
                "\"MARK2\" TEXT);"); // 4: mark2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBREADED_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBReadedBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String module_id = entity.getModule_id();
        if (module_id != null) {
            stmt.bindString(2, module_id);
        }
 
        String dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindString(3, dataId);
        }
 
        String mark1 = entity.getMark1();
        if (mark1 != null) {
            stmt.bindString(4, mark1);
        }
 
        String mark2 = entity.getMark2();
        if (mark2 != null) {
            stmt.bindString(5, mark2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBReadedBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String module_id = entity.getModule_id();
        if (module_id != null) {
            stmt.bindString(2, module_id);
        }
 
        String dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindString(3, dataId);
        }
 
        String mark1 = entity.getMark1();
        if (mark1 != null) {
            stmt.bindString(4, mark1);
        }
 
        String mark2 = entity.getMark2();
        if (mark2 != null) {
            stmt.bindString(5, mark2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBReadedBean readEntity(Cursor cursor, int offset) {
        DBReadedBean entity = new DBReadedBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // module_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dataId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mark1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // mark2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBReadedBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModule_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDataId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMark1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMark2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBReadedBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBReadedBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBReadedBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
